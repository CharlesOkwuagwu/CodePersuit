// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CodePersuit.Service.Sdk
{
    using CodePersuit.Service;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CodePersuitAPI.
    /// </summary>
    public static partial class CodePersuitAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='reponame'>
            /// </param>
            /// <param name='checkinHash'>
            /// </param>
            /// <param name='fileToProcess'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutCoverageFileAsync(this ICodePersuitAPI operations, string username, string reponame, string checkinHash, CodeCoverageFile fileToProcess = default(CodeCoverageFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutCoverageFileWithHttpMessagesAsync(username, reponame, checkinHash, fileToProcess, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Repo>> GetAllReposByUsernameAsync(this ICodePersuitAPI operations, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllReposByUsernameWithHttpMessagesAsync(userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='repoName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Repo> GetRepoByUsernameAndRepoNameAsync(this ICodePersuitAPI operations, string userName, string repoName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRepoByUsernameAndRepoNameWithHttpMessagesAsync(userName, repoName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetUserByUsernameAsync(this ICodePersuitAPI operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByUsernameWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<User>> GetAllUsersAsync(this ICodePersuitAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllUsersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
